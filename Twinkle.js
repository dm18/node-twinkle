var express = require('express');
var app = express();

//UDP port
var port = 7777;

//Device IP
var HOST = '192.168.2.17';

var authentication_token = '';

var hex_authentication_token = new Buffer('', 'hex');;

var LEDs = [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ]; 


var messageKeyHandle = new Buffer('01', 'hex');
var messageKey = new Buffer('7b5a36252acebdd3', 'hex');
var messageHandle = new Buffer('00', 'hex');
var message = new Buffer('','hex');


function get_authentication_token() {
	//http login
	const http = require('http');
	
	const data_login = JSON.stringify({
		challenge: 'zup0PYgxFYkdCmMP9gdxqYNn2fIT+mIwhevMA+N81Y4='
	})

	const options_login = {
		hostname: HOST,
		port: 80,
		path: '/xled/v1/login',
		method: 'POST',
		headers: {
			'Content-Type': 'application/json',
			'Content-Length': data_login.length
		}
	}

	const req = http.request(options_login, (res) => {
		//console.log(`statusCode: ${res.statusCode}`)
		//console.log(`statusCode: ${res.rawTrailers}`)
  
		res.setEncoding('utf8');
		let rawData = '';
		res.on('data', (chunk) => { rawData += chunk; });
		res.on('data', (d) => {
			//process.stdout.write(d)
			try {
				const parsedData = JSON.parse(rawData);
				//console.log(parsedData);
				authentication_token = parsedData.authentication_token;
				console.log("authentication_token: " + parsedData.authentication_token);
				
				authentication_token_hex()
			} catch (e) {
				console.error(e.message);
			}
		})
	
	})

	req.on('error', (error) => {
		console.error(error);
	})


	req.write(data_login);
	req.end();
	

}


function verify_authentication_token() {
	//http login
	const http = require('http');

	const data_login = JSON.stringify({
		
	})

	const options_login = {
  		hostname: HOST,
  		port: 80,
  		path: '/xled/v1/verify', //<--- this URL causes error
  		method: 'POST',
  		headers: {
    		'Content-Type': 'application/json',
    		'X-Auth-Token': authentication_token,
    		'Content-Length': data_login.length
  		}
	}

	const req = http.request(options_login, (res) => {
		console.log(`verify_authentication_token http statusCode: ${res.statusCode}`)
		
		set_twinkly_mode_rt();
		
		//console.log(`statusCode: ${res.rawTrailers}`)
  
		/*res.setEncoding('utf8');
		let rawData = '';
		res.on('data', (chunk) => { rawData += chunk; });
		res.on('data', (d) => {
    		//process.stdout.write(d)
    		try {
      			const parsedData = JSON.parse(rawData);
      			//console.log(parsedData);
				//authentication_token = parsedData.authentication_token;
				//console.log(parsedData.authentication_token);
    		} catch (e) {
      			console.error(e.message);
    		}
  		})*/
	})

	req.on('error', (error) => {
		console.error(error);
	})


	req.write(data_login);
	req.end();
	
}



function set_twinkly_mode_rt() {
	//http login
	const http = require('http');
	
	const data_login = JSON.stringify({
		mode: 'rt'
	})

	const options_login = {
		hostname: HOST,
		port: 80,
		path: '/xled/v1/led/mode', //<--- this URL causes error
		method: 'POST',
		headers: {
			'Content-Type': 'application/json',
			'X-Auth-Token': authentication_token,
			'Content-Length': data_login.length
		}
	}

	const req = http.request(options_login, (res) => {
		console.log(`mode http statusCode: ${res.statusCode}`)
		//console.log(`statusCode: ${res.rawTrailers}`)
  
		
	})

	req.on('error', (error) => {
		console.error(error);
	})


	req.write(data_login);
	req.end();
}

function authentication_token_hex() {
	hex_authentication_token = new Buffer.from(authentication_token, 'base64');
	//var test = new Buffer.from(authentication_token, 'hex');
	console.log("hex version of authentication_token_hex");
	console.log(hex_authentication_token);
	
	verify_authentication_token();
}





//client.close();

var dgram = require('dgram');
var client = dgram.createSocket('udp4');

client.on('listening', function () {
	//Connect to twinkly
	get_authentication_token();
	
    var address = client.address();
    console.log('UDP Server listening on ' + address.address + ":" + address.port);
});

client.on(message, function (message, remote) {
    console.log(address + ':' + port +' - ' + message);
    //message.write('01','hex');
 });

client.send(message, port, HOST, function(err, bytes) {
    if (err) throw err;
    console.log('UDP message sent to ' + HOST +':'+ port);
    message.write('01','hex');
});


setInterval(function() {
	//message =  Buffer('02','hex');
	message = Buffer.from(LEDs);
  
	//var packetDataLength = messageKeyHandle.length + messageKey.length + messageHandle.length + message.length;
	//var packetData = Buffer.concat([messageKeyHandle, messageKey, messageHandle, message], packetDataLength);

	var packetDataLength = messageKeyHandle.length + hex_authentication_token.length + messageHandle.length + message.length;
	var packetData = Buffer.concat([messageKeyHandle, hex_authentication_token, messageHandle, message], packetDataLength);


	//console.log(packetData);
  	client.send(packetData, port, HOST); //, 0, message.length);
}, 100);

var http = require('http');
http.createServer(function (req, res) {
	res.writeHead(200, {'Content-Type': 'text/html'});
	//res.write('Hello World!');
	
  
	var urlPath = req.url;
	var urlPathArray = urlPath.split("/");
  
  	res.write(urlPathArray[1]+'\n');
  	res.write(urlPathArray[2]+'\n');
  	res.write(urlPathArray[3]+'\n');
  	res.write(urlPathArray[4]+'\n');
  	
  	//first value in array is "" because the string it starts off with is '\something\aa' and \ is the split
  	var ledIndexString = urlPathArray[1];
  	var ledIndex = parseInt(ledIndexString) - 1;
  	
  	//arrays start at 0
  	var ledIndexStart = ledIndex * 3;
  	//var ledIndexEnd = ledIndexStart + 2;
  	
	res.write(ledIndexStart + '\n');
	//res.write(ledIndexEnd + '\n');
  
	var removed_elements = LEDs.splice(ledIndexStart, 3, urlPathArray[2], urlPathArray[3], urlPathArray[4]);
    //console.log(removed_elements);
  
	res.end();
}).listen(8088);